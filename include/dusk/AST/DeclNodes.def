//===--- DeclNodes.def - Dusk declaration metaprogramming -------*- C++ -*-===//
//
//                                 dusk-lang
// This source file is part of a dusk-lang project, which is a semestral
// assignement for BI-PJP course at Czech Technical University in Prague.
// The software is provided "AS IS", WITHOUT WARRANTY OF ANY KIND.
//
//===----------------------------------------------------------------------===//
//
// This file contains macros used for macro-metaprogramming with declarations.
//
//===----------------------------------------------------------------------===//

/// DECL(Id, Parent)
///   For all non-abstract declaration nodes, it's enumerator name is
///   \c DeclKind::Id. The node's class name is \c Id##Decl, the name
///   of the base class is \c Parent.

/// ABSTRACT_DECL(Id, Parent)
///   Representing an abstract base class for a class hierarchy.
///   Does not have enumerator name, although \c Id##Decl is still class name.
///
///   \note Abstract nodes are ignored by default.
#ifndef ABSTRACT_DECL
#define ABSTRACT_DECL(Id, Parent)
#endif

/// CONTEXT_DECL(Id, Parent)
///   Used for declaration, that produce a context change, e.g. \c FuncDecl.
#ifndef CONTEXT_DECL
#define CONTEXT_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// FUNC_DECL(Id, Parent)
///   Represents a function type.
#ifndef FUNC_DECL
#define FUNC_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif

/// VALUE_DECL(Id, Parent)
///   Declaration of value types.
#ifndef VALUE_DECL
#define VALUE_DECL(Id, Parent) DECL(Id, Parent)
#endif

ABSTRACT_DECL(Val, Decl)
  VALUE_DECL(Var, ValDecl)
  VALUE_DECL(Param, ValDecl)

FUNC_DECL(Func, Decl)
CONTEXT_DECL(Module, Decl)

#undef VALUE_DECL
#undef FUNC_DECL
#undef CONTEXT_DECL
#undef ABSTRACT_DECL
#undef DECL

